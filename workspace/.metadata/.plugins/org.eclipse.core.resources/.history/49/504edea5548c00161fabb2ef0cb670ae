"""
Dacorator/parameterized decorator
"""


def logging_decorator(func):
    def wrapper():
        wrapper.count += 1
        print "The function I modify has been called {0} times(s).".format(
              wrapper.count)
        func()
    wrapper.count = 0
    return wrapper


def a_function():
    print "I step"

modified_function = logging_decorator(a_function)
print modified_function()
modified_function()

"""
decorator without argument
foo = addbonus(add)
"""


# def addbonus(func):
#     print "1st_step"
#
#     def wrapper(x, y):
#         print "2nd step"
#         return "ajay" + str(func(x, y))
#     print "3rd step"
#
#     return wrapper
#
#
# @addbonus
# def add(x, y):
#     print "4th step"
#     return x + y
# print "0th step"
# print add(10, 20)

# parameterized
# def addbonus(a, b):
#     def first_wrap(fun):
#         def wrapper(x, y):
#             return a + b + fun(x, y)
#         return wrapper
#     return first_wrap
#
#
# @addbonus(10, 20)
# def add(x, y):
#     return x + y
#
# print add(10, 20)


"""
fibonaccii by generator
"""


# def fib():
#     print "1st"
#     a, b = 0, 1
#     while 1:
#         print "2nd"
#         yield a
#         print "3rd"
#         a, b = b, a + b
# a = fib()
# for i in range(10):
#     print "4th"
#     print a.next(),


"""
lambda filter map reduce
"""
# l1 = map(lambda x: x + 2, [1, 2, 3])
# print l1
#
# l2 = filter(lambda x: x % 2 == 0, [1, 2, 3])
# print l2
#
# l3 = reduce(lambda x, y: x + y, [2, 3, 4, 5])
# print l3
